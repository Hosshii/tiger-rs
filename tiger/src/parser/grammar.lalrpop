use crate::{lexer::{Error as LexError, TokenKind, Reserved, Separator, StringLiteral, Ident}, parser::ast, position::Position};

grammar;

pub Program: ast::Program = {
    <Expr> => ast::Program::Expr(<>),
    <Decls> => ast::Program::Decls(<>),
}

Expr: ast::Expr = {
    MatchedExpr => <>,
    UnmatchedExpr => <>,
}

MatchedExpr: ast::Expr = {
    MatchedIf => <>,
    MatchedExprType => <>,
}
UnmatchedExpr: ast::Expr = {
    UnmatchedIf => <>,
    UnmatchedExprType => <>,
}

MatchedIf: ast::Expr = {
    <l:@L> "if" <e1:Expr> "then" <e2:MatchedExpr> "else" <e3:MatchedExpr> <r:@R> => ast::Expr::If(Box::new(e1), Box::new(e2), Some(Box::new(e3)), (l, r)),
}

UnmatchedIf: ast::Expr = {
    <l:@L> "if" <e1:Expr> "then" <e2:Expr> <r:@R> => ast::Expr::If(Box::new(e1), Box::new(e2), None, (l, r)),
    <l:@L> "if" <e1:Expr> "then" <e2:MatchedExpr> "else" <e3:UnmatchedExpr> <r:@R> => ast::Expr::If(Box::new(e1), Box::new(e2), Some(Box::new(e3)), (l, r)),
}

UnmatchedExprType: ast::Expr = {
    // <id:TypeIdent> "[" <e1:Expr> "]" "of" <e2:UnmatchedExpr> => {
    <l:@L> <id:Ident> "[" <e1:Expr> "]" "of" <e2:UnmatchedExpr> <r:@R> => {
        ast::Expr::ArrayCreation {
            type_id: ast::TypeIdent(id),
            size: Box::new(e1),
            init: Box::new(e2),
            pos: (l, r),
        }
    },

    <l:@L> <lvalue:LValue> ":=" <e:UnmatchedExpr> <r:@R> => ast::Expr::Assign(lvalue, Box::new(e), (l, r)),

    <l:@L> "while" <e1:Expr> "do" <e2:UnmatchedExpr> <r:@R> => ast::Expr::While(Box::new(e1), Box::new(e2), (l, r)),
    <l:@L> "for" <id:Ident> ":=" <e1:Expr> "to" <e2:Expr> "do" <e3:UnmatchedExpr> <r:@R> => {
        ast::Expr::For(id, Box::new(e1), Box::new(e2), Box::new(e3), (l, r))
    },
}

MatchedExprType: ast::Expr = {
    // <id:TypeIdent> "[" <e1:Expr> "]" "of" <e2:MatchedExpr> => {
    <l:@L> <id:Ident> "[" <e1:Expr> "]" "of" <e2:MatchedExpr> <r:@R> => {
        ast::Expr::ArrayCreation {
            type_id: ast::TypeIdent(id),
            size: Box::new(e1),
            init: Box::new(e2),
            pos: (l, r),
        }
    },

    Or => <>,
    <l:@L> <lvalue:LValue> ":=" <e:MatchedExpr> <r:@R> => ast::Expr::Assign(lvalue, Box::new(e), (l, r)),

    <l:@L> "while" <e1:Expr> "do" <e2:MatchedExpr> <r:@R> => ast::Expr::While(Box::new(e1), Box::new(e2), (l, r)),
    <l:@L> "for" <id:Ident> ":=" <e1:Expr> "to" <e2:Expr> "do" <e3:MatchedExpr> <r:@R> => {
        ast::Expr::For(id, Box::new(e1), Box::new(e2), Box::new(e3), (l, r))
    },
}

LValue: ast::LValue = {
    <l:@L> <id:Ident> <r:@R> => ast::LValue::Var(id, (l, r)),
    LValueNotID => <>,
}

LValueNotID: ast::LValue = {
    <l:@L> <lvalue:LValue> "." <i:Ident> <r:@R> => ast::LValue::RecordField(Box::new(lvalue), i, (l, r)),
    <l:@L> <lvalue:Ident> <r1:@R> "[" <e:Expr> "]" <r2:@R> => ast::LValue::Array(Box::new(ast::LValue::Var(lvalue, (l, r1))), Box::new(e), (l, r2)),
    <l:@L> <lvalue:LValueNotID> "[" <e:Expr> "]" <r:@R> => ast::LValue::Array(Box::new(lvalue), Box::new(e), (l, r)),
}

ExprSeq = Semicolon<Expr>;

BracketedExprs: ast::Expr = {
    "(" <ExprSeq> ")" => ast::Expr::Sequence(<>),
}

Decls: Vec<ast::Decl> = {
    <d:Decl*> => {
        use ast::Decl::*;
        if d.is_empty() {
            d
        } else {
            let mut iter = d.into_iter();
            let init = iter.next().unwrap();
            let (mut d, remain) = iter
                .fold((Vec::new(), init), |(mut result, cur), x| match (cur, x) {
                    (Type(mut lhs), Type(mut rhs)) => {
                        lhs.append(&mut rhs);
                        (result, Type(lhs))
                    }
                    (Func(mut lhs), Func(mut rhs)) => {
                        lhs.append(&mut rhs);
                        (result, Func(lhs))
                    }
                    (cur, x) => {
                        result.push(cur);
                        (result, x)
                    }
                }
            );
            d.push(remain);
            d
        }
    }
}

Decl: ast::Decl = {
    TypeDecl => ast::Decl::Type(vec![<>]),
    VarDecl => ast::Decl::Var(<>),
    FuncDecl => ast::Decl::Func(vec![<>]),
} 

TypeDecl: ast::TypeDecl = {
    <l:@L> "type" <id:TypeIdent> "=" <ty:Type> <r:@R> => {
        ast::TypeDecl {
            id: id,
            ty: ty,
            pos: (l, r),
        }
    }
}

Type: ast::Type = {
    <l:@L> <type_id:TypeIdent> <r:@R> => ast::Type::Id(type_id, (l, r)),
    <l:@L> "{" <f:TypeFields> "}" <r:@R> => ast::Type::Fields(f, (l, r)),
    <l:@L> "array" "of" <id:TypeIdent> <r:@R> => ast::Type::Array(id, (l, r)),
}

TypeFields: ast::TypeFields = {
    <f: NonZeroTypeFields?> => {
        if let Some(fields) = f {
            fields
        }else {
            Vec::new()
        }
    }
}

NonZeroTypeFields: ast::TypeFields = {
    <l:@L> <i1:Ident> ":" <i2:TypeIdent> <r:@R> <f2:("," @L Ident ":" TypeIdent @R)*> => {
        let mut fields = Vec::new();
        fields.push(ast::TypeField {id: i1, type_id: i2, pos: (l, r)});
        for (_, l2, id, _, type_id, r2) in f2 {
            fields.push(ast::TypeField {id: id, type_id: type_id, pos: (l2, r2)});
        }
        fields
    }
}

VarDecl: ast::VarDecl = {
    <l:@L> "var" <id:Ident> ":=" <e:Expr> <r:@R> => {
        ast::VarDecl::Short(id, e, (l, r))
    },
    <l:@L> "var" <id:Ident> ":" <type_id:TypeIdent> ":=" <e:Expr> <r:@R> => {
        ast::VarDecl::Long(id, type_id, e, (l, r))
    } 
}

TypeIdent: ast::TypeIdent = {
    <Ident> => ast::TypeIdent(<>),
}

FuncDecl: ast::FuncDecl = {
    <l:@L> "function" <id:Ident> "(" <f:TypeFields> ")" <type_id:(":" TypeIdent)?> "=" <e:Expr> <r:@R> => {
        let type_id = type_id.map(|i| i.1);
        ast::FuncDecl{name: id, params: f, ret_type: type_id, body: e, pos: (l, r)}
    }
}

// precedence 
// strong --> weak
//  Mul --> Add --> Comp --> And --> Or --> ExperType1

Or = Tier<OrOp, And>;
And = Tier<AndOp, Comp>;
Comp = Tier<CompOp, Add>;
Add = Tier<AddOp, Mul>;
Mul = Tier<MulOp, Neg>;
Neg: ast::Expr = {
    <l:@L> "-" <n:Neg> <r:@R> => ast::Expr::Neg(Box::new(n), (l, r)),
    Primary => <>,
}

Primary: ast::Expr = {
    <l:@L> "nil" <r:@R> => ast::Expr::Nil((l,r)),
    <l:@L> <v:Int> <r:@R> => ast::Expr::Int(v, (l, r)),
    <l:@L> <v:Str> <r:@R> => ast::Expr::Str(v, (l, r)),
    BracketedExprs => <>,
    <l:@L> "break" <r:@R> => ast::Expr::Break((l, r)),
    <l:@L> "let" <d:Decls> "in" <e:ExprSeq> "end" <r:@R> => ast::Expr::Let(d, e, (l, r)),
    <l:@L> <lvalue:LValueNotID> <r:@R> => ast::Expr::LValue(lvalue, (l, r)),
    <l:@L> <id:Ident> <r:@R> => ast::Expr::LValue(ast::LValue::Var(id, (l, r)), (l, r)),
    <l:@L> <id:Ident> "(" <e:Comma<Expr>> ")" <r:@R> => ast::Expr::FuncCall(id, e, (l, r)),
    <l:@L> <type_id:TypeIdent> "{" <f1:(@L Ident "=" Expr @R ("," @L Ident "="Expr @R)*)?>  "}" <r:@R> => {
        let fields = if let Some((l1, id, _, expr, r1, _fields)) = f1 {
            let fields = vec![ast::RecordField {id: id, expr: expr, pos: (l1, r1)}];
            let iter = _fields.into_iter().map(|(_,l2, id, _, expr, r2)| ast::RecordField {id: id, expr: expr, pos:(l2, r2)});
            fields.into_iter().chain(iter).collect()
        }else {
            ast::RecordFields::new()
        };

        ast::Expr::RecordCreation(type_id, fields, (l, r))
    },
}

MulOp: ast::Operator = {
    "*" => ast::Operator::Mul,
    "/" => ast::Operator::Div,
}

AddOp: ast::Operator = {
    "+" => ast::Operator::Plus,
    "-" => ast::Operator::Minus,
}

CompOp: ast::Operator = {
    "=" => ast::Operator::Eq,
    "<>" => ast::Operator::Neq,
    ">=" => ast::Operator::Ge,
    ">" => ast::Operator::Gt,
    "<=" => ast::Operator::Le,
    "<" => ast::Operator::Lt,
}

AndOp: ast::Operator = {
    "&" => ast::Operator::And,
}

OrOp: ast::Operator = {
    "|" => ast::Operator::Or,
}

Semicolon<T>: Vec<T> = {
    <mut v:(<T> ";")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
}

Comma<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
}

Tier<Op,NextTier>: ast::Expr = {
    <l:@L> <lhs:Tier<Op,NextTier>> <op:Op> <rhs:NextTier> <r:@R> => ast::Expr::Op(op, Box::new(lhs), Box::new(rhs), (l, r)),
    NextTier
};

extern {
    type Location = Position;
    type Error = LexError;

    enum TokenKind {
        "type" => TokenKind::Reserved(Reserved::Type),
        "var" => TokenKind::Reserved(Reserved::Var),
        "function" => TokenKind::Reserved(Reserved::Function),
        "break" => TokenKind::Reserved(Reserved::Break),
        "of" => TokenKind::Reserved(Reserved::Of),
        "end" => TokenKind::Reserved(Reserved::End),
        "in" => TokenKind::Reserved(Reserved::In),
        "nil" => TokenKind::Reserved(Reserved::Nil),
        "let" => TokenKind::Reserved(Reserved::Let),
        "do" => TokenKind::Reserved(Reserved::Do),
        "to" => TokenKind::Reserved(Reserved::To),
        "for" => TokenKind::Reserved(Reserved::For),
        "while" => TokenKind::Reserved(Reserved::While),
        "else" => TokenKind::Reserved(Reserved::Else),
        "then" => TokenKind::Reserved(Reserved::Then),
        "if" => TokenKind::Reserved(Reserved::If),
        "array" => TokenKind::Reserved(Reserved::Array),

        ":=" => TokenKind::Separator(Separator::ColonEqual),
        "|" => TokenKind::Separator(Separator::Pipe),
        "&" => TokenKind::Separator(Separator::Ampersand),
        ">=" => TokenKind::Separator(Separator::GreaterOrEqual),
        ">" => TokenKind::Separator(Separator::Greater),
        "<=" => TokenKind::Separator(Separator::LesserOrEqual),
        "<" => TokenKind::Separator(Separator::Lesser),
        "<>" => TokenKind::Separator(Separator::NotEqual),
        "=" => TokenKind::Separator(Separator::Equal),
        "/" => TokenKind::Separator(Separator::Slash),
        "*" => TokenKind::Separator(Separator::Star),
        "-" => TokenKind::Separator(Separator::Hyphen),
        "+" => TokenKind::Separator(Separator::Plus),
        "." => TokenKind::Separator(Separator::Dot),
        "{" => TokenKind::Separator(Separator::LBrace),
        "}" => TokenKind::Separator(Separator::RBrace),
        "[" => TokenKind::Separator(Separator::LBrack),
        "]" => TokenKind::Separator(Separator::RBrack),
        "(" => TokenKind::Separator(Separator::LParen),
        ")" => TokenKind::Separator(Separator::RParen),
        ";" => TokenKind::Separator(Separator::Semicolon),
        ":" => TokenKind::Separator(Separator::Colon),
        "," => TokenKind::Separator(Separator::Comma),

        Str => TokenKind::Str(<StringLiteral>),

        Int => TokenKind::Int(<u64>),

        Ident => TokenKind::Ident(<Ident>),

        Eof => TokenKind::Eof,
    }
}
